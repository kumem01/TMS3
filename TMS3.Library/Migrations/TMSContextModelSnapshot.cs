// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TMS3.Library.Entities;

namespace TMS3.Library.Migrations
{
    [DbContext(typeof(TMSContext))]
    partial class TMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TMS3.Library.Entities.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("JrnCreatedBy");

                    b.Property<DateTime>("JrnCreatedDate");

                    b.Property<string>("JrnModifiedBy");

                    b.Property<DateTime>("JrnModifiedDate");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("PersonID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TMS3.Library.Entities.Task", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentText");

                    b.Property<string>("DescText");

                    b.Property<int?>("ElementCodeID");

                    b.Property<bool>("IsAllocable");

                    b.Property<bool>("IsOverhead");

                    b.Property<bool>("IsUpdateREquired");

                    b.Property<string>("JrnCreatedBy");

                    b.Property<DateTime>("JrnCreatedDate");

                    b.Property<string>("JrnModifiedBy");

                    b.Property<DateTime>("JrnModifiedDate");

                    b.Property<string>("TaskName");

                    b.Property<int>("TaskNumber");

                    b.Property<int>("TaskStatusRefrenceTypeID");

                    b.HasKey("TaskID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TMS3.Library.Entities.TaskContact", b =>
                {
                    b.Property<int>("TaskContactID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContactTypeID");

                    b.Property<string>("JrnCreatedBy");

                    b.Property<DateTime>("JrnCreatedDate");

                    b.Property<string>("JrnModifiedBy");

                    b.Property<DateTime>("JrnModifiedDate");

                    b.Property<int?>("PersonID");

                    b.Property<int?>("TaskID");

                    b.HasKey("TaskContactID");

                    b.HasIndex("PersonID");

                    b.HasIndex("TaskID");

                    b.ToTable("TaskContact");
                });

            modelBuilder.Entity("TMS3.Library.Entities.TaskCost", b =>
                {
                    b.Property<int>("TaskCostID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("CommentText");

                    b.Property<string>("CostTitle");

                    b.Property<string>("DescText");

                    b.Property<int>("ExpenseTypeReferenceTypeID");

                    b.Property<bool>("IsEstimate");

                    b.Property<string>("JrnCreatedBy");

                    b.Property<DateTime>("JrnCreatedDate");

                    b.Property<string>("JrnModifiedBy");

                    b.Property<DateTime>("JrnModifiedDate");

                    b.Property<string>("PONumber");

                    b.Property<int?>("ParentTaskCostID");

                    b.Property<int?>("PaymentMehtodreferenceTypeID");

                    b.Property<int?>("TaskID");

                    b.Property<int?>("VendorTypeReferenceTypeID");

                    b.HasKey("TaskCostID");

                    b.HasIndex("TaskID");

                    b.ToTable("TaskCost");
                });

            modelBuilder.Entity("TMS3.Library.Entities.TaskDate", b =>
                {
                    b.Property<int>("TaskDateID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<string>("CommentText");

                    b.Property<string>("JrnCreatedBy");

                    b.Property<DateTime>("JrnCreatedDate");

                    b.Property<string>("JrnModifiedBy");

                    b.Property<DateTime>("JrnModifiedDate");

                    b.Property<int?>("PersonID");

                    b.Property<int>("TaskDateReferenceTypeID");

                    b.Property<int?>("TaskID");

                    b.HasKey("TaskDateID");

                    b.HasIndex("PersonID");

                    b.HasIndex("TaskID");

                    b.ToTable("TaskDate");
                });

            modelBuilder.Entity("TMS3.Library.Entities.TaskContact", b =>
                {
                    b.HasOne("TMS3.Library.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID");

                    b.HasOne("TMS3.Library.Entities.Task", "Task")
                        .WithMany("TaskContacts")
                        .HasForeignKey("TaskID");
                });

            modelBuilder.Entity("TMS3.Library.Entities.TaskCost", b =>
                {
                    b.HasOne("TMS3.Library.Entities.Task", "Task")
                        .WithMany("TaskCosts")
                        .HasForeignKey("TaskID");
                });

            modelBuilder.Entity("TMS3.Library.Entities.TaskDate", b =>
                {
                    b.HasOne("TMS3.Library.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID");

                    b.HasOne("TMS3.Library.Entities.Task", "Task")
                        .WithMany("TaskDAtes")
                        .HasForeignKey("TaskID");
                });
#pragma warning restore 612, 618
        }
    }
}
